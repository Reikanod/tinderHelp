import telebot
from gpt import *
from util import *
import requests

with open(r'G:\Study\Py projects\Keys\tg_chat_key.txt', 'r') as file:
    bot = telebot.TeleBot(file.read())


class Dialog:
    def __init__(self):
        self.mode = 'start'  # —Å—Ç–∞—Ç—É—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ—Ç–æ–º


dialog = Dialog()
chatgpt = ChatGptService(token='gpt:EG44JHCgWRZcE28XEIsgJFkblB3TKFPdeHKs9DxUsueSBurd')

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é


@bot.message_handler(commands=['start', 'help'])
def start(message):  # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    dialog.mode = 'start'
    # –æ—Ç–ø—Ä–∞–≤–ª—è—é —á–µ–ª–æ–≤–µ–∫—É —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    with open(r'resources\messages\main.txt', 'r', encoding='utf-8') as start_message:
        photo = open(r'resources\images\main.jpg', 'rb')
        bot.send_photo(message.chat.id, photo, caption=start_message.read().replace('*', ''))


@bot.message_handler(commands=['gpt'])
def gpt(message):  # —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º
    dialog.mode = 'gpt'
    photo = open(r'resources\images\gpt.jpg', 'rb')
    with open(r'resources\messages\gpt.txt', 'r', encoding='utf-8') as gpt_text:
        bot.send_photo(message.chat.id, photo, caption=gpt_text.read().replace('*', ''))


@bot.message_handler(commands=['date'])
def date(message):
    dialog.mode = 'date'
    photo = open(r'resources\images\date.jpg', 'rb')
    bot.send_photo(message.chat.id, photo)
    with open(r'resources\messages\date.txt', 'r', encoding='utf-8') as file:
        date_text = file.read().replace('*', '')

    inline_keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
    mash_button = telebot.types.InlineKeyboardButton(text='–ú–∞—à –ú–∏–ª–∞—à', callback_data='date_mash')
    ida_button = telebot.types.InlineKeyboardButton(text='–ò–¥–∞ –ì–∞–ª–∏—á', callback_data='date_ida')
    olsen_button = telebot.types.InlineKeyboardButton(text='–≠–ª–∏–∑–∞–±–µ—Ç –û–ª—Å–µ–Ω', callback_data="date_olsen")
    scarlet_button = telebot.types.InlineKeyboardButton(text='–°–∫–∞—Ä–ª–µ—Ç –ô–æ—Ö–∞–Ω—Å–æ–Ω', callback_data="date_scarlet")
    ana_button = telebot.types.InlineKeyboardButton(text="–ê–Ω–∞ –î–µ –ê—Ä–º–∞—Å", callback_data='date_ana')
    inline_keyboard.add(mash_button, ida_button, olsen_button, scarlet_button, ana_button)
    bot.send_message(message.chat.id, date_text, reply_markup=inline_keyboard)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def choose_girl(call):
    match call.data:
        case "date_mash":
            name = '–ú–∞—à –ú–∏–ª–∞—à'
            image = open(r'resources\images\photo_mash.webp', 'rb')
        case 'date_ida':
            name = "–ò–¥–∞ –ì–∞–ª–∏—á"
            image = open(r'resources\images\photo_ida.webp', 'rb')
        case 'date_olsen':
            name = '–≠–ª–∏–∑–∞–±–µ—Ç –û–ª—Å–µ–Ω'
            image = open(r'resources\images\photo_olsen.jpg', 'rb')
        case 'date_ana':
            name = '–ê–Ω–∞ –î–µ –ê—Ä–º–∞—Å'
            image = open(r'resources\images\photo_ana.jpeg', 'rb')
        case 'date_scarlet':
            name = '–°–∫–∞—Ä–ª–µ—Ç –ô–æ—Ö–∞–Ω—Å–æ–Ω'
            image = open(r'resources\images\photo_scarlet.jpg', 'rb')
    bot.answer_callback_query
    text = f'–¢–≤–æ–π –≤—ã–±–æ—Ä: {name}'
    bot.send_photo(call.message.chat.id, image, caption=text)


def date_dialog(message):
    pass


def gpt_dialog(message):  # —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º
    text_from_human = message.text
    answer = chatgpt.send_question('–ù–∞–ø–∏—à–∏ —á–µ—Ç–∫–∏–π –∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç', text_from_human)
    bot.send_message(message.chat.id, answer)


@bot.message_handler(content_types=['text'])
def main(message):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    match dialog.mode:
        case 'start':
            start(message)
        case 'gpt':
            gpt_dialog(message)
        case 'date':
            date_dialog(message)




bot.infinity_polling()

# from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackQueryHandler, CommandHandler
# from gpt import *
# from util import *
# import requests
# with open(r'G:\Study\Py projects\Keys\tg_chat_key.txt', 'r') as file:
#     TOKEN = file.read()
#
# async def gpt(update, context):
#     dialog.mode = 'gpt'
#     text = load_message("gpt")
#     await send_photo(update, context, "gpt")
#     await send_text(update, context, text)
#
# async def date(update, context):
#     dialog.mode = 'date'
#     text = load_message("date")
#     await send_photo(update, context, "date")
#     await send_text_buttons(update, context, text, {
#         'date_grande': '–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ',
#         'date_robbie': '–ú–∞—Ä–≥–æ –†–æ–±–±–∏',
#         'date_mash': '–ú–∞—à –ú–∏–ª–∞—à',
#         'date_rayan': '–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥',
#         'date_tom': '–¢–æ–º –•–∞—Ä–¥–∏'
#     })
#
# async def date_dialog(update, context):
#     pass
#
# async def date_button(update, context):
#     query = update.callback_query.data
#     await update.callback_query.answer()
#
#
#     mash_img = 'https://oyda.ru/wp-content/uploads/2023/12/mash-milash-maksim-1.webp'
#     await app.sendPhoto()
#     await context.bot.send_photo(chat_id=update.effective_chat.id, photo=photo)
#     await send_text(update, context, mash_img)
#
#
# async def start(update, context):
#     dialog.mode = 'main'
#     text = load_message('main')
#     await send_photo(update, context, 'main')
#     await send_text(update, context, text)
#
#     await show_main_menu(update, context, {
#         "start": '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞',
#         "profile": '–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–ª—è üòé',
#         "opener": '—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞',
#         "message": '–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà',
#         "date": '–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•',
#         "gpt": '–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†',
#     })
#
# async def gpt_dialog(update, context):
#     text = update.message.text
#     answer = await chatgpt.send_question('–Ω–∞–ø–∏—à–∏ —á–µ—Ç–∫–∏–π –∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å', text)
#     await send_text(update, context, '–≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å —á–∞—Ç –≥–ø—Ç')
#     await send_text(update, context, answer)
#
# async def hello(update, context):
#     if dialog.mode == 'gpt':
#         await gpt_dialog(update, context)
#     else:
#         await send_text(update, context, '*–ü—Ä–∏–≤–µ—Ç*')
#         await send_text(update, context, "_–ö–∞–∫ –¥–µ–ª–∞_")
#         await send_text(update, context, '–≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏' + update.message.text)
#
#         await send_photo(update, context, 'avatar_main')
#         await send_text_buttons(update, context, "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å?", {
#             "start": "–ó–∞–ø—É—Å—Ç–∏—Ç—å",
#             'stop': "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
#         })
#
# async def hello_button(update, context):
#     query = update.callback_query.data
#     if query == 'start':
#         await send_text(update, context, "–ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω")
#     else:
#         await send_text(update, context, "–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
#
#
# dialog = Dialog()
# dialog.mode = None
#
# chatgpt = ChatGptService(token='gpt:EG44JHCgWRZcE28XEIsgJFkblB3TKFPdeHKs9DxUsueSBurd')
#
# app = ApplicationBuilder().token(TOKEN).build()
# app.add_handler(CommandHandler('start', start))
# app.add_handler(CommandHandler('gpt', gpt))
# app.add_handler(CommandHandler('date', date))
#
# app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, hello))
#
# app.add_handler(CallbackQueryHandler(date_button, pattern='^date_.*'))
# app.add_handler(CallbackQueryHandler(hello_button))
#
# app.run_polling()
